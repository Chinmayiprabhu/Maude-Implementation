load prelude.maude

fmod ELEM is
    including QID .
    sort Elem .
    op eRROr : -> Elem .
    subsort Qid < Elem .
endfm

view Elem from TRIV to ELEM is
    sort Elt to Elem .
endv

fmod ELEMSET is
    including ELEM .
    including SET{Elem} .

    sorts ElemSet NeElemSet .
    subsort Set{Elem} < ElemSet .
    subsort NeSet{Elem} < NeElemSet .
endfm

fmod NODE is
    including ELEM .
    including ELEMSET .
    sort Node .
    op _-->_ : Elem Elem -> Node [ctor] .
    op _-/->_ : Elem Elem -> Node [ctor] .

endfm

**** I defined a new NODELIST because cmb/mb did not like assoc in the constructor .
fmod NODELIST is
    including NODE .
    sort  NeNodeList .

    op root : Elem -> NeNodeList [ctor] .
    op __ : NeNodeList Node -> NeNodeList [ctor] .

endfm

fmod TREE is
    including NODELIST .
    sort BrTree Tree .
    subsort   Tree < BrTree < NeNodeList .
    vars el el1 el2 : Elem .
    var els : ElemSet .
    var nd : Node .
    var ndl : NeNodeList .


    op _in_ : Elem NeNodeList -> Bool .
    eq el in (root(el)) = true .
    eq el in (ndl (el1 --> el2) )  = (el == el2) or (el in ndl) .
    eq el in (ndl (el1 -/-> el2) )  = (el == el2) or (el in ndl) .
    eq el in ndl = false [owise] .


   cmb ndl (el1 --> el2) : Tree if (el1 in ndl) and  (not (el2 in ndl)) and ndl :: Tree .
   mb root(el) : Tree .

   cmb ndl (el1 --> el2) : BrTree if (el1 in ndl) and  (not (el2 in ndl)) and ndl :: BrTree .
   cmb ndl (el1 -/-> el2) : BrTree if (el1 in ndl) and  (not (el2 in ndl)) and ndl :: Tree .
   cmb ndl (el1 -/-> el2) : BrTree if (el1 in ndl) and  (not (el2 in ndl)) and ndl :: BrTree .

   op existPath : Elem Elem NeNodeList -> Bool .
   eq existPath(el1 , el2 , ndl (el1 --> el2) ) = true .
   eq existPath(el1 , el2 , ndl (el --> el2) ) = (el == el1) or existPath(el1 , el , ndl) .
   eq existPath(el1 , el2 , ndl (el --> el2) ) = (el =/= el1) and existPath(el1 , el2, ndl) .
   eq existPath(el1 , el2 , ndl nd ) =  existPath(el1 , el2, ndl) .
   eq existPath(el1 , el2 , ndl) = false [owise] .

   *** The Parent function
   op  parent : Elem NeNodeList -> Elem .
   eq  parent(el, root(el1)) = eRROr .
   ceq parent(el, ndl ( el1 --> el2 ))  = el1 if (el == el2) .
   ceq parent(el, ndl ( el1 --> el2 ))  = parent(el , ndl)  if (el =/= el2) .

  ***  The childof function:
    op  childof : Elem NeNodeList -> ElemSet .
    ceq childof(el , ndl (el1 --> el2)) = (el2 , childof(el , ndl)) if (el == el1) /\ (not (el1 in ndl)) .
    ceq childof(el , ndl (el1 --> el2)) = (el2 , childof(el , ndl)) if (el == el1) /\ (el1 in ndl) .
    ceq childof(el , ndl (el1 --> el2)) = childof(el , ndl) if (el =/= el1) /\ (el1 in ndl) .
    eq  childof(el, ndl) = empty [owise] .

endfm


view Tree from TRIV to TREE is
    sort Elt to Tree .
endv

fmod TREESET is
    including TREE .
    including SET{Tree} .

    sorts TreeSet NeTreeSet .
    subsort Set{Tree} < TreeSet .
    subsort NeSet{Tree} < NeTreeSet .
endfm


fmod FILTERTREE is
  including TREE .
  including ELEMSET .
  including TREESET .
  including SET{Elem} .
  ***sort FamilyTree .
  *** sort leavesSet .
  *** op <_:_> : TreeSet Elem -> FamilyTree [ctor] .
  *** op <_;_> : TreeSet ElemSet -> leavesSet [ctor] .

  vars el el1 el2 : Elem .
  var els els1  : ElemSet .
  var neels : NeElemSet .
  var nd : Node .
  var t : Tree .
  var bt : BrTree .
  var ndl : NeNodeList .

  ***Not using this snippet
  ***op _with_ : Elem Tree -> FamilyTree .
  ***eq el with t = <  branch(el,t) : el > .
  ***op (_:\:_)with_  : Elem  NeElemSet Tree -> FamilyTree .
  ***eq (el :\: els) with t = < break(els,t) : el > .



  op _with_ : Elem Tree -> Set{Elem}.
  eq el with t =  branchelem(el,t) .

 *** filter opeartor with respect to tree
  op (_:\:_)with _ : Elem NeElemSet Tree -> Set{Elem} .
  eq (el :\: els) with t = Inter (((el :|: els) with t), leavesof (t) ) .

  op (_:|:_)with_  : Elem NeElemSet Tree -> Set{Elem} .
  eq (el :|: els) with t =  dif (branchelem(el, t ) , branchelem( els, t )) .

  ****given a node it returns a branch from such node .
  op branch : Elem Tree -> Tree .
  eq branch(el , root(el))  = root(el) .
  eq branch(el , ndl (el1 --> el))   = root(el) .
  eq branch(el , ndl (el --> el2))   = branch(el , ndl)  (el --> el2)  .
  ceq branch(el , ndl (el1 --> el2)) = branch(el , ndl)  (el1 --> el2) if existPath( el, el1, ndl (el1 --> el2)) .
  ceq branch(el , ndl (el1 --> el2))  = branch(el , ndl)  if existPath( el, el1, ndl (el1 --> el2)) == false .
  eq branch (el , ndl) = root(eRROr) [owise] .

  *** given a elem it returns all the elements in that brnach
  op branchelem : Elem Tree -> Set{Elem} .
  eq branchelem(el , root(el))  = el .
  eq branchelem(el , ndl (el1 --> el))   = el .
  eq branchelem(el , ndl (el --> el2))   = (el2 , branchelem(el , ndl))  .
  ceq branchelem(el , ndl (el1 --> el2)) = (el2 ,branchelem(el , ndl)) if existPath( el, el1, ndl (el1 --> el2)) .
  ceq branchelem(el , ndl (el1 --> el2))  = (branchelem(el , ndl))  if existPath( el, el1, ndl (el1 --> el2)) == false .
  eq branchelem (el , ndl) = empty [owise] .

  *** overload the branchelem to work over sets
  op branchelem : ElemSet Tree -> Set{Elem} .
  eq branchelem (empty , t) = empty .
  eq branchelem ((els, el) , t) =  branchelem(els , t) , branchelem(el , t) .

  ***Set difference opeartor from prelude
  op dif : Set{Elem} Set{Elem} -> Set{Elem} .
  eq dif (els, els1 ) = (els \ els1) .

  *** Set Intersection operation from prelude
  op Inter : Set{Elem} Set{Elem} -> Set{Elem} .
  eq Inter (els, els1 ) = intersection (els , els1) .

  *** ( Set of elements in total tree or original tree )
  op originaltree : Tree -> Set{Elem} .
  eq originaltree ( ndl ( el1 --> el2)) = ( el2 , originaltree( ndl ) ) .
  eq originaltree ( ndl)  = empty [owise] .

  ***For any given elem this checks if it has no children
  op Zerochildren : Tree -> Set{Elem} .
  ceq Zerochildren ( ndl ( el1 --> el2) ) = ( el1, Zerochildren(ndl)) if (lenChildren(el2 , ndl(el1 --> el2)) == 0) .
  eq Zerochildren ( ndl) = empty [owise] .

  *** For any Elem in tree checks how many children it has.
  op lenChildren : Elem NeNodeList -> Nat .
  ceq lenChildren ( el, ndl(el1 --> el2)) = 1 if (el == el1) /\ (not( el1 in ndl)) .
  ceq lenChildren ( el, ndl(el1 --> el2)) = 1 + lenChildren(el, ndl) if (el == el1) /\ (( el1 in ndl)) .
  ceq lenChildren ( el, ndl(el1 --> el2)) = lenChildren(el, ndl) if (el =/= el1) /\ (el1 in ndl) .
  eq lenChildren ( el , ndl) = 0 [owise] .

  *** using the previous calculatoon this gives total number of leavues in the main tree
  op leavesof : Tree -> Set{Elem} .
  eq leavesof (t) =  dif (originaltree(t) , Zerochildren(t)) .

  *** overload the branch to work over sets of elements
  op branch : ElemSet Tree -> TreeSet .
  eq branch(empty , t) = empty .
  eq branch((els, el) , t) =  branch(els , t) , branch(el , t)  .

  *** break one of the constructors so that the tree becomes a broken tree
  op break : Elem Tree -> BrTree .
  eq break(el, root(el)) = root(el) .
  eq break(el, ndl (el1 --> el))   = ndl (el1 -/-> el) .
  ceq break (el, ndl (el1 --> el2)) = break(el, ndl) (el1 --> el2) if el =/= el2 .

  *** overload the break function to work over sets
  op break : ElemSet BrTree -> BrTree .
  eq break(empty, bt) = bt .
  eq break ((els,el), bt) = break(els, break(el,bt)) .

endfm



fmod TEST is
  including FILTERTREE .


  ops Hlthcr Admin Hlthwrkr marketing Billing Doc HAss Phar Spcl GP Nur LabAss Gynac DT cleaner : -> Elem .
  ops a b c d e : -> Elem .
  ops Hlthservs trt Gnrltrt Spcltrt Gchckup RoutineChk Dent Gynac Derm Othrs Dentr crown Rootcnl Pymnt Online offline : -> Elem .
  ops Europe EastEu NorthEu CntrlEu SouthEu WestEu Belarus BulgariaCzechia Czechoslovakia Hungary Moldova Poland Romania
RussianFederation Slovakia Ukraine UnionofSovietSocialistRepublics Denmark Estonia FaroeIslands Finland Iceland Ireland Latvia Lithuania
Norway Sweden UnitedKingdom Albania Andorra BosniaHerzegovina Croatia Cyprus Gibraltar Greece HolySee Italy Malta Montenegro NorthMacedonia
Portugal SanMarino Serbia SerbiaMontenegro Slovenia Spain Yugoslavia Austria Belgium France Germany Luxembourg Netherlands Switzerland Liechtenstein : -> Elem .

  ops tr1 tr2 tr3 entityTr purposeTr locationTr : -> Tree .

  eq tr3 = root(a) .

  eq tr1 = root(a) (a --> b) (a --> c) (c --> d) (c --> d) .

  eq entityTr = root(Hlthcr) (Hlthcr --> Admin)  (Hlthcr --> Hlthwrkr) (Admin --> marketing) (Admin --> Billing)
  (Hlthwrkr --> Doc) (Hlthwrkr --> Phar)(Hlthwrkr --> HAss) (Doc --> Spcl) ( Doc --> GP ) (HAss --> Nur)
  (HAss --> LabAss) (Spcl --> Gynac) (Spcl --> DT) (GP --> cleaner) .

  eq purposeTr = root(Hlthservs) (Hlthservs --> trt )(Hlthservs --> Pymnt )(trt --> Gnrltrt ) (trt --> Spcltrt )(Gnrltrt --> Gchckup )
  (Gnrltrt --> RoutineChk) (Spcltrt --> Dent) (Spcltrt --> Gynac) (Spcltrt --> Derm ) (Spcltrt --> Othrs) (Dent --> Dentr)
    (Dent --> crown) (Dent --> Rootcnl) (Pymnt --> Online) (Pymnt --> offline) .

  eq locationTr = root(Europe) (Europe --> EastEu)(Europe --> NorthEu) (Europe --> CntrlEu)(Europe --> SouthEu) (Europe --> WestEu )
  (EastEu --> Belarus) (EastEu --> BulgariaCzechia) (EastEu --> Czechoslovakia)  (EastEu --> Hungary) (EastEu --> Moldova)
  (EastEu --> Poland) (EastEu --> Romania) (EastEu --> RussianFederation) (EastEu -->  Slovakia)
  (EastEu --> Ukraine) (EastEu --> UnionofSovietSocialistRepublics)  (NorthEu --> Denmark) (NorthEu --> Estonia) (NorthEu --> FaroeIslands) (NorthEu --> Finland)
  (NorthEu --> Iceland ) (NorthEu --> Ireland) (NorthEu --> Latvia) (NorthEu --> Lithuania) (NorthEu --> Norway) (NorthEu --> Sweden) (NorthEu --> UnitedKingdom) (SouthEu --> Albania)
  (SouthEu --> Andorra ) (SouthEu --> BosniaHerzegovina ) (SouthEu --> Croatia) (SouthEu --> Cyprus)
  (SouthEu --> Gibraltar) (SouthEu --> Greece ) (SouthEu --> HolySee) (SouthEu --> Italy) (SouthEu --> Malta ) (SouthEu --> Montenegro ) (SouthEu --> NorthMacedonia ) (SouthEu --> Portugal )
  (SouthEu --> SanMarino) (SouthEu --> Serbia) (SouthEu --> SerbiaMontenegro) (SouthEu --> Slovenia) (SouthEu --> Spain) (SouthEu --> Yugoslavia) (WestEu --> Austria)
  (WestEu --> Belgium) (WestEu --> France) (WestEu --> Germany) (WestEu --> Luxembourg) (WestEu --> Netherlands) (WestEu --> Switzerland ) (WestEu --> Liechtenstein) .

endfm

*** red root(Hlthcr) (Hlthcr --> Admin)  (Hlthcr --> Hlthwrkr) (Admin --> marketing) . ---> Tree
*** red root(Hlthcr) (Hlthcr --> Admin)  (Hlthcr --> Hlthwrkr) (Admin -/-> marketing) . ---> BrTree
*** red root(Hlthcr) (Hlthcr --> Admin)  (Doc -/-> Spcl) . ---> NeNodeList
*** red (root(Hlthcr) (Hlthcr --> Admin)  (Hlthcr --> Hlthwrkr) (Admin -/-> marketing)) , (root(Hlthcr) (Hlthcr --> Admin)  (Doc -/-> Spcl)) . -->  [TreeSet,NeTreeSet,NeNodeList]
*** red break ( (Doc, HAss) , tr ) .
*** red existPath ( Admin , DT , tr ) . --> false
*** red existPath(Hlthcr ,  LabAss , tr ) . --> True
**** red  existPath(a,d,tr) .
*** red branch ( Admin , tr ) .
*** red branch ( (marketing,Doc)  , tr ) .-->NeSet{Tree}: root(marketing), root(Doc) Doc --> Spcl Doc --> GP Spcl --> Gynac Spcl --> DT
*** red break ( Doc , tr ) .--> BrTree: root(Hlthcr) Hlthcr --> Admin Hlthcr --> Hlthwrkr Admin --> marketing Admin --> Billing Hlthwrkr -/->
    *** Doc Hlthwrkr --> Phar Hlthwrkr --> HAss Doc --> Spcl Doc --> GP HAss --> Nur HAss --> LabAss Spcl --> Gynac Spcl
    *** --> DT
*** red break ( ( Admin , Spcl ) , tr ) . --> BrTree: root(Hlthcr) Hlthcr -/-> Admin Hlthcr --> Hlthwrkr Admin --> marketing Admin --> Billing Hlthwrkr -->
    *** Doc Hlthwrkr --> Phar Hlthwrkr --> HAss Doc -/-> Spcl Doc --> GP HAss --> Nur HAss --> LabAss Spcl --> Gynac Spcl --> DT

*** red ( (Hlthcr :\: Admin, Doc, HAss) with tr2 ) . --> result Elem: Phar
**** red ( (Hlthcr :\: Doc, HAss) with tr2 ) . --> result NeSet{Elem}: marketing, Billing, Phar
**** red ( (Hlthcr :\: Doc) with tr2 ) . --> result NeSet{Elem}: marketing, Billing, Phar, Nur, LabAss

***  red leavesof (tr2) . --> result NeSet{Elem}: marketing, Billing, Phar, Nur, LabAss, Gynac, DT, cleaner

*** red Spcl with tr . --> FamilyTree: < root(Spcl) Spcl --> Gynac Spcl --> DT : Spcl >
