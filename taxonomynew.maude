load prelude.maude

fmod ELEM is
    including QID .
    sort Elem .
    subsort Qid < Elem .
    op eRROr : -> Elem .
    op NoElem : -> Elem .
endfm

fmod NODE is
    including ELEM .
    sort Node .
    op _<c_ : Elem Elem -> Node [ctor] .
    op root : Elem -> Node [ctor] .
endfm

view Node from TRIV to NODE is
    sort Elt to Node .
endv

fmod NODELIST is
    including NODE .
    including LIST{Node} .

    sorts NodeLIST NeNodeLIST .
    subsort List{Node} < NodeLIST .
    subsort NeList{Node} < NeNodeLIST .
endfm

fmod Tree is
 including NODELIST .
 vars el el1 el2 : Elem .
 var nd : Node .
 var ndl : NodeLIST .
 var nendl : NeNodeLIST .

 op _in_ : Elem NodeLIST -> Bool .
 eq el in (root(el)) = true .
 eq el in (ndl (el1 <c el2) )  = (el == el2) or (el in ndl) .
 eq el in ndl = false [owise] .

 ****op  _disjoint_ : ElemSet NodeLIST -> Bool .
 ***eq  emp disjoint P = true .
***eq  (A, S) disjoint P = not (A in P) and S disjoint P .


 endfm

fmod Test is
 including NODELIST .
 including Tree .

ops a b c d e : -> Elem .

op nodelist : -> NodeLIST .
eq nodelist = root(a) (a <c b)  (a <c c) (c <c d) .

endfm
