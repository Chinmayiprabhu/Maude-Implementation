load prelude.maude

fmod ELEM is
    including QID .
    sort Elem .
    subsort Qid < Elem .
    op eRROr : -> Elem .
    op NoElem : -> Elem .
endfm

fmod NODE is
    including ELEM .
    sort Node .
    op _<c_ : Elem Elem -> Node [ctor] .
endfm

view Node from TRIV to NODE is
    sort Elt to Node .
endv


**** I defined a new NODELIST because cmb/mb did not like assoc in the constructor .
fmod NODELIST is
    including NODE .
    sort  NeNodeList .

    op root : Elem -> NeNodeList [ctor] .
    op __ : NeNodeList Node -> NeNodeList [ctor] .

endfm

fmod TREE is
    including NODELIST .
    sort Tree .
    subsort   Tree < NeNodeList .
    vars el el1 el2 : Elem .
    var nd : Node .
    var ndl : NeNodeList .

    op _in_ : Elem NeNodeList -> Bool .
    eq el in (root(el)) = true .
    eq el in (ndl (el1 <c el2) )  = (el == el2) or (el in ndl) .
    eq el in ndl = false [owise] .


   cmb ndl (el1 <c el2) : Tree if (el1 in ndl) and  (not (el2 in ndl)) and ndl :: Tree .
   mb root(el) : Tree .

endfm

fmod TEST is
 including NODELIST .
 including TREE .

ops a b c d e : -> Elem .

op nodelist : -> NeNodeList .
eq nodelist = root(a) (a <c b)  (a <c c) (c <c d) .

endfm

*** red root(a) (a <c b)  (c <c d) . ---> NodeList
**** red  root(a) . ----> Tree
*** root(a) (a <c b)  (a <c c) (c <c d) . ----> Tree
