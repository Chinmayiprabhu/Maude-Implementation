load prelude.maude

fmod ELEM is
    including QID .
    sort Elem .
    op eRROr : -> Elem .
    subsort Qid < Elem .
endfm

view Elem from TRIV to ELEM is
    sort Elt to Elem .
endv

fmod ELEMSET is
    including ELEM .
    including SET{Elem} .

    sorts ElemSet NeElemSet .
    subsort Set{Elem} < ElemSet .
    subsort NeSet{Elem} < NeElemSet .
endfm

fmod NODE is
    including ELEMSET .
    sort Node .
    op _<c_ : NeElemSet Elem -> Node [ctor] .

    var el : Elem .
    var els : ElemSet .

    op parent : Node -> Elem .
    eq parent (els <c el) = el .

    op children : Node -> ElemSet .
    eq children (els <c el) = els .
endfm

view Node from TRIV to NODE is
    sort Elt to Node .
endv

fmod NODESET is
    including NODE .
    including SET{Node} .

    sorts NodeSet NeNodeSet .
    subsort Set{Node} < NodeSet .
    subsort NeSet{Node} < NeNodeSet .
endfm


fmod TOPOLOGY is
    including NODESET .
    including BOOL .
    including NAT .

    sort Topology .
    op tau : NeElemSet Elem NeNodeSet -> Topology [ctor] .

    var neels : NeElemSet .
    var nends : NeNodeSet .
    vars el el1 el2 : Elem .
    var els : ElemSet .
    var nd : Node .
    var nds : NodeSet .
    var topo : Topology .

    op wfTopology : Topology -> Bool .
    eq wfTopology(tau(neels, el , nends)) =
      reachability(neels, el , nends) and
      singleParent(neels,nends) and
      singleNode(neels,nends) .

    op reachability : ElemSet Elem NodeSet -> Bool .
    eq reachability((el2 , els), el1 , nds) = existPath(el1 , el2 , nds) and reachability(els, el1 , nds) .
    eq reachability(empty , el , nds) = true .

    op singleParent : ElemSet NodeSet -> Bool .
    eq singleParent((el , els), nds) = allMyParents(el,nds) < 2 and singleParent(els, nds) .
    eq singleParent(empty , nds) = true .

    op singleNode : ElemSet NodeSet -> Bool .
    eq singleNode((el , els), nds) =
      nrShowsParent(el,nds) < 2 and
      nrShowsChild (el,nds) < 2  and
      singleNode(els, nds) .
    eq singleNode(empty , nds) = true .

    op existPath : Elem Elem NodeSet -> Bool .
    ceq existPath(el1 , el2 , nds) = true
      if (findParent(el2 , nds) =/= eRROr) /\ existPath(el1 , (findParent(el2 , nds)) , nds) .
    ceq existPath(el1 , el2 , nds) = true if el1 == el2 .
    eq existPath(el1 , el2 , nds) = false [owise] .

    op findParent : Elem NodeSet -> Elem .
    ceq findParent(el , (nd , nds) ) = parent(nd) if el in children(nd) .
    ceq findParent(el , (nd, nds) ) = findParent(el,nds) if not el in children(nd) .
    eq findParent(el , nds) = eRROr [owise] .

    op allMyParents : Elem NodeSet -> Nat .
    ceq allMyParents(el , (nd , nds) ) = 1 + allMyParents(el ,  nds ) if el in children(nd) .
    ceq allMyParents(el , (nd , nds) ) = allMyParents(el,nds) if not el in children(nd) .
    eq allMyParents(el , empty ) = 0 .

    op nrShowsParent  : Elem NodeSet -> Nat .
    ceq nrShowsParent(el , (nd , nds) ) = 1 + nrShowsParent(el ,  nds ) if el == parent(nd) .
    ceq nrShowsParent(el , (nd , nds) ) =  nrShowsParent(el ,  nds ) if el =/= parent(nd) .
    eq nrShowsParent(el , empty ) = 0 .

    op nrShowsChild  : Elem NodeSet -> Nat .
    ceq nrShowsChild (el , (nd , nds) ) = 1 + nrShowsChild(el ,  nds ) if el in children(nd) .
    ceq nrShowsChild (el , (nd , nds) ) = nrShowsChild(el ,  nds ) if not el in children(nd) .
    eq nrShowsChild (el , empty ) = 0 .

    op _:<=:_with_ : Elem Elem Topology -> Bool .
    eq el1 :<=: el2 with topo = el1 :<: el2 with topo or el1 :===: el2 with topo .

    op _:<:_with_ : Elem Elem Topology -> Bool .
    eq el1 :<: el2 with topo = existPath(el2 , el1 , nodes(topo)) and el1 =/= el2 .
    ***eq el1 :<: el2 with topo = false [owise] .

    op _:===:_with_ : Elem Elem Topology -> Bool .
    eq el1 :===: el2 with topo =
      findParent(el1, nodes(topo)) == findParent(el2, nodes(topo)) and el1 =/= el2 .
    ***eq el1 :===: el2 with topo = false [owise] .

    op nodes : Topology -> NodeSet .
    eq nodes (tau(neels, el , nends)) =  nends .
endfm
